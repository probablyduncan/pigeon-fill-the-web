@import "tailwindcss";

@font-face {
    font-family: "Tom's New Roman";
    src: local("Tom's New Roman"), url("assets/tomnr.ttf");
}

@layer base {
    :root {
        --yellow: #ffcc00;
        --blue: rgb(212, 231, 245);
        --line-color: #2f2f3111;
        --margin: 1.5rem;
        --font-size-body: clamp(1.25rem, 2vw, 1.5rem);
        --font-size-nav: clamp(1rem, 1.5vw, 1.2rem);
        --max-width: 1440px;

        /* overscroll-behavior: none; */
        overflow-x: hidden;
    }

    body {
        font-size: var(--font-size-body);
        overflow-x: hidden;
    }

    * {
        box-sizing: border-box;
        padding: unset;
        margin: unset;
        font-family: "Times New Roman", Times, serif;
    }

    img {
        width: 100%;
        display: block;
        user-select: none;
    }

    a {
        text-decoration: underline;
    }

    ::selection,
    a:hover {
        background-color: var(--blue);
    }

    p {
        text-wrap: balance;
    }

    main {
        display: flex;
        flex-direction: column;
    }

    main > * {
        position: relative;
        width: 100%;
        max-width: var(--max-width);
        margin-inline: auto;
    }
}

@layer utilities {
    .grid-cols {
        display: grid;
        grid-template-columns: repeat(12, 1fr);
        gap: 8px;
        padding: 8px;
    }

    .stack {
        position: relative;
        aspect-ratio: 3 / 2;

        & > * {
            position: absolute;
        }
    }

    .show-on-hover,
    .show-on-move,
    .show-on-scroll,
    .visible-after-ai,
    .show-after-scroll-past {
        opacity: 0;
    }

    .stack:hover .show-on-hover {
        opacity: 1;
    }

    .stack:hover .hide-on-hover {
        opacity: 0;
    }

    .top-left,
    .top-right,
    .bottom-left,
    .bottom-right {
        z-index: 999;
        position: fixed;
        font-size: var(--font-size-nav);
        font-style: italic;
        line-height: 1;
    }

    .top-left,
    .top-right {
        top: 4px;
    }

    .bottom-left,
    .bottom-right {
        bottom: 4px;
    }

    .top-left,
    .bottom-left {
        left: 8px;
    }

    .top-right,
    .bottom-right {
        right: 8px;
    }

    .label {
        line-height: 1;
        background-color: white;
        padding: 0.1em 0.25em;
        font-size: var(--font-size-nav);
        white-space: nowrap;

        &::selection {
            background-color: black;
            color: white;
        }
    }

    .wonky,
    .wonky *,
    .label {
        font-family: "Tom's New Roman", "Times New Roman", Times, serif;
    }
}

#subtitle-container {
    position: fixed;
    /* bottom: 4rem; */
    top: 50svh;
    left: 50%;
    transform: translate(-50%, -50%);
    z-index: 999;

    width: 90%;
    display: flex;
    justify-content: center;
    pointer-events: none;
}

#subtitle-wrapper {
    display: none;
    text-align: center;
    font-style: italic;
    /* hyphens: auto; */
    /* text-wrap: balance; */
}

#subtitle {
    pointer-events: auto;
    
    line-height: 1;
    padding: 0.1em 0.25em;
    background-color: white;
    border: 1px solid var(--line-color);
    
    box-decoration-break: clone;
    -webkit-box-decoration-break: clone;

    &::selection {
        background-color: black;
        color: white;
    }

    & .word-mask {
        /* don't clip overhanging italics like 'f'.
        even though we're removing clip mask, masking in splitText
        still seems to fix weird empty 2nd line problem */
        overflow: visible !important;
    }
}

[data-subtitle] {
    &::before,
    &::after {
        position: absolute;
        z-index: -1;
        color: #2f2f316f;
        font-size: 1rem;
        color: black;
    }

    &::before {
        content: "‚Ä†";
        content: "‚Äª";
        content: "‚Åñ";
        content: "‚Ä§";
        content: "‚Ä¶";
        content: "üóà";
        content: "üó©";
        /* content: "üóØ"; */
        /* content: "üóã"; */
        /* content: "‚ñª"; */
        /* content: "‚á≤"; */
        content: "!";
        content: "‚óÆ";
        content: "‚Äº";
        content: "‚ãÜ";
        content: "‚Ä•";
        top: 0;
    }

    &::after {
        /* content: "‚Üó"; */
        content: "√ó";
        content: "‚ãâ";
        content: "‚Ä•";
        content: "‚ó¶";
        content: "..";
        content: "‚ãÖ";
        content: "‚Ä§";
        opacity: 0.8;
        bottom: 0;
    }

    &[data-subtitle-icon-right]::before,
    &[data-subtitle-icon-right]::after {
        right: 8px;
    }

    &:not([data-subtitle-icon-right])::before,
    &:not([data-subtitle-icon-right])::after {
        left: 8px;
    }
}

#title-wrapper {
    min-height: calc(100svh - 12.5vw);
    display: flex;
    justify-content: center;
    align-items: center;

    #title {
        width: 100%;
        margin: unset;
        /* margin-bottom: 4rem; */
        justify-items: center;
        align-items: center;

        img {
            grid-column: 5;
            width: 1rem;
            margin-bottom: 4rem;
        }

        h1,
        h3 {
            grid-column: 1 / 13;
            width: 100%;
            font-style: italic;
            text-align: center;
            line-height: 1;
        }

        h1 {
            font-size: clamp(2rem, 8vw, 6rem);
        }

        h3 {
            font-size: clamp(1rem, 3vw, 2.25rem);
        }
    }
}

#background {
    width: min(100%, var(--max-width));
    height: 100lvh;
    position: fixed;
    z-index: -1;
    transform: translateX(-50%);
    inset: 0 50%;
    pointer-events: none;

    --border-width: 1px;
    --border-color: var(--line-color);

    background: linear-gradient(
            90deg,
            transparent calc(4px - var(--border-width) / 2),
            var(--border-color) calc(4px - var(--border-width) / 2),
            var(--border-color) calc(4px + var(--border-width) / 2),
            transparent calc(4px + var(--border-width) / 2)
        ),
        linear-gradient(
            90deg,
            transparent calc(25% + 2px - var(--border-width) / 2),
            var(--border-color) calc(25% + 2px - var(--border-width) / 2),
            var(--border-color) calc(25% + 2px + var(--border-width) / 2),
            transparent calc(25% + 2px + var(--border-width) / 2)
        ),
        linear-gradient(
            90deg,
            transparent calc(50% - var(--border-width) / 2),
            var(--border-color) calc(50% - var(--border-width) / 2),
            var(--border-color) calc(50% + var(--border-width) / 2),
            transparent calc(50% + var(--border-width) / 2)
        ),
        linear-gradient(
            90deg,
            transparent calc(75% - 2px - var(--border-width) / 2),
            var(--border-color) calc(75% - 2px - var(--border-width) / 2),
            var(--border-color) calc(75% - 2px + var(--border-width) / 2),
            transparent calc(75% - 2px + var(--border-width) / 2)
        ),
        linear-gradient(
            90deg,
            transparent calc(100% - 4px - var(--border-width) / 2),
            var(--border-color) calc(100% - 4px - var(--border-width) / 2),
            var(--border-color) calc(100% - 4px + var(--border-width) / 2),
            transparent calc(100% - 4px + var(--border-width) / 2)
        );

    /* without this the grid line on the left doesn't render fully for some reason?? */
    background-color: white;
}

@media (max-width: 768px) {
    #background {
        background: linear-gradient(
                90deg,
                transparent calc(4px - var(--border-width) / 2),
                var(--border-color) calc(4px - var(--border-width) / 2),
                var(--border-color) calc(4px + var(--border-width) / 2),
                transparent calc(4px + var(--border-width) / 2)
            ),
            linear-gradient(
                90deg,
                transparent calc(50% - var(--border-width) / 2),
                var(--border-color) calc(50% - var(--border-width) / 2),
                var(--border-color) calc(50% + var(--border-width) / 2),
                transparent calc(50% + var(--border-width) / 2)
            ),
            linear-gradient(
                90deg,
                transparent calc(100% - 4px - var(--border-width) / 2),
                var(--border-color) calc(100% - 4px - var(--border-width) / 2),
                var(--border-color) calc(100% - 4px + var(--border-width) / 2),
                transparent calc(100% - 4px + var(--border-width) / 2)
            );
    }
}
